module examples.basic

import data.list as l
import data.tensor as t
import data.map as m
import data.set as s
import control.state
import control.nodet
import core.math
import ml.vision.datasets as ds
import ml.nn.conv2d
import ml.nn.maxpool2d
import ml.nn.softmax

/*  
comments here
*/

type A {
    A(i32)
    B(i32)
}

fun test() : state<i32> unit {
    val a = get<i32>()
    set(a+1)
}

/* comments here */

fun test2<a>(a: a) : a {
    a
}

impl fun test2(a:i32) : i32 {
    a + 33
}

fun test_branch(a:i32) : [nodet<i32>] i32 {
    var b = 10
    if (branch(a)) {
        b = b + a + 1
    } else {
        b = b + a + 2
    }
    b
}

fun test_inline(o : str) : io unit {
    inline_python<unit>("print(o)")
}

fun test3(a : f32, b : f32) : f32 {
    val c = a + b
    c * 2.0 * c
}

diff test3 wrt (a, b) = auto

fun test4(a : t.tensor<f32, @[4, 4]>) : t.tensor<f32, @[4,4]> {
    sin(a)
}

diff test4 wrt (a) = auto

fun main() : io unit {
   var a = 0
   val A(b) = A(2)

   val l = [1, 2, 3]

   print(l.length(l))

   val t = (2, "string", 0.2+0.1, [1]) : (i32, str, f32, [i32])

   val (t0, t1, 0.1+0.2, t3|r) = t

   print(t3)

   print(sin(0.2))

   if (l != []) {
       print("aaa")
   } else {
       print("bbb")
   }

   val ll = l.map(l, fn(a:i32) : io i32{
       print(a)
       a + 1
   })

   val m = m.empty<i32, i32>()

   print(m.has(m.set(m,3,3), 3))
   print(m.get(m,3))

   print(m.mapv(m.set(m,3,3), fn (a:i32) : io i32 { 
       print(a)
       a+2 
   }))

   val s0 = s.empty() : s.intset
   print(s.insert(s0, 4))

   val t0 = t.full<@[4, 4+2], f32>(0.1, [])
   val t1 = t.full<@[6, 2]>(1.0, [])

   val t3 = t.full<@[4, ?, ?]>(2.0, [4, 4])
   print(t3)

   print(t.matmul(t0, t1) + t.full<@[4, 2]>(0.9, []))

   print(sin(t1))

   print(handle nodet<i32> {
       handle state<i32> {
           test()
           while (a < 10) {
               test()
               a = a + 1
           }
           test()
           test_branch(50)
       } with {
           fun get() {
               resume(a)
           }
           fun set(v:i32) {
               a = v
               print(a)
               resume(unit)
           }
       }
   } with {
       fun branch(a:i32) {
           resume(false) + resume(true)
       }
   })
   print(if a > 10 {
       print(10000)
       100
   } else {
       print(1000000)
       1000
   })
   while a < 100 {
       print(a)
       a = a + 1
   }

   case A(200) {
       A(a) -> {print(a)}
       B(3) -> {print("bbbb")}
   }

   val (da, db) = diff test3(2.0, 3.0, 1.0)
   print(da)
   print(db)
   val f = fn <a>(bbb:a) : a { bbb }
   print(f(a))
   print(a)
   test_inline("test")

   print(diff test4(t.full<@[4,4]>(0.2, []), t.full<@[4,4]>(1.0, [])))

   // val ds = ds.mnist("./data", true)
   // ds.foreach(ds, fn(d : t.tensor<f32, @[1, 28, 28]>, i : i32) : io unit {
   //     if (i < 10) {
   //         print(d)
   //     } else {
   //         unit
   //     }
   // })

   val feature = t.full<@[4, 3, 16, 16]>(0.1, [])
   val weight  = t.full<@[2, 3, 4, 4]>(0.1, [])
   print(feature)
   print(conv2d(feature, weight))

   val ones = t.full<@[4, 2, 13, 13]>(1.0, [])
   val (f_grad, w_grad) = diff conv2d(feature, weight, ones)
   print(f_grad)
   print(w_grad)

   print(maxpool2d<2,2>(feature))
   val ones2 = t.full<@[4, 3, 13, 13]>(1.0, [])
   print(diff maxpool2d<4,4>(feature, ones2))

   print(softmax(feature, 1))

}

