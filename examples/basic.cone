module example

import data/list

type A {
   A(i32)
   B(i32)
}

fun test() : state<i32> unit {
   val a = get<i32>()
   set(a+1)
}

fun test2(a:i32) : i32 {
   a + 1
}

fun test_branch(a:i32) : nodet<i32> i32 {
   if (branch(a)) {
      a + 1
   } else {
      a + 2
   }
}

fun test_inline() : io unit {
   inline_python<unit>("print(\"test_inline\")")
}

fun main() : io unit {
  var a = 0
  // val A(b) = A(2)

  // val l = Cons(3, Cons(2, Cons(1, Nil<i32>)))

  // val ll = map(l, fn(b:i32) : io i32{
  //    print(b)
  //    print("xxxx")
  //    a + 1
  // })

  // print(handle nodet<i32> {
  //  // handle state<i32> {
  //  //    test()
  //  //    test()
  //  //    test()
  //      test_branch(50)
  //  // } with {
  //  //    fun get() {
  //  //       resume(a)
  //  //    }
  //  //    fun set(v:i32) {
  //  //       a = v
  //  //       print(a)
  //  //       resume(unit)
  //  //    }
  //  // }
  // } with {
  //    fun branch(a:i32) {
  //       print("yyyy")
  //       resume(true) + resume(false)
  //    }
  // })
  print(if a > 10 {
     print(10000)
     100
  } else {
     print(1000000)
     1000
  })
  while a < 10 {
    print(a)
    a = a + 1
    unit
  }

  case A(200) {
     A(a) -> {print(a)}
     B(3) -> {print("bbbb")}
  }

  print(test2(a))
  val f = fn () : i32 { a + 1 }
  print(f())
  print(a)
  test_inline()
  //print(1)
  //print(2)
  //unit
}

