module examples.mnist

import ml.nn.conv2d
import ml.nn.maxpool2d
import ml.nn.softmax
import ml.nn.relu
import data.tensor

fun mnist(input:tensor<f32, @[1,1,28,28]>, \
          conv1:tensor<f32, @[32,1,3,3]>,  \
	  conv2:tensor<f32, @[64,32,3,3]>) : tensor<f32, @[1,64,23,23]> {
    val l0 = conv2d(input, conv1)
    val l1 = relu(l0)
    val l2 = conv2d(l1, conv2)
    val l3 = relu(l2)
    val l4 = maxpool2d<2,2>(l3)
    l4
}

diff mnist wrt (input, conv1, conv2) = auto

fun main() : io unit {
    val ones = full<@[1, 1, 32, 32]>(1.0, [])
    print(ones)
}