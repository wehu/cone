module core.prelude

// builtin functions

fun ____negative<a>(a: a) : a

diff ____negative wrt (a) = ____negative_diff

fun ____negative_diff<a>(a: a, da: a) : a {
    - da
} 

fun ____add<a>(a: a, b:a) : a 

diff ____add wrt (a, b) = ____add_diff

fun ____add_diff<a>(a: a, b:a, do: a) : (a, a) {
    (do, do)
}

fun ____sub<a>(a: a, b:a) : a

diff ____sub wrt (a) = ____sub_diff

fun ____sub_diff<a>(a: a, b: a, do: a) : (a, a) {
    (do, - do)
}

fun ____mul<a>(a: a, b:a) : a

diff ____mul wrt (a, b) = ____mul_diff

fun ____mul_diff<a>(a: a, b: a, do: a) : (a, a) {
    (b * do, a * do)
}

fun ____div<a>(a: a, b:a) : a

diff ____div wrt (a, b) = ____div_diff

fun ____div_diff<a>(a: a, b: a, do: a) : (a, a) {
    (do / b,  - (a * do) / (b * b))
}

fun ____mod<a>(a: a, b:a) : a

fun ____lt<a>(a: a, b:a) : bool

fun ____gt<a>(a: a, b:a) : bool 

fun ____le<a>(a: a, b:a) : bool 

fun ____ge<a>(a: a, b:a) : bool 

fun ____eq<a>(a: a, b:a) : bool

fun ____ne<a>(a: a, b:a) : bool 

fun ____not<a>(a: bool) : bool 

fun ____and<a>(a: bool, b:bool) : bool

fun ____or<a>(a: bool, b:bool) : bool 

fun ____assign<a>(a: a, b:a) : unit 

fun ____zeros<a>(a: a) : a

// builtin types

type neg<a:num>

type add<a:num, a:num>

type sub<a:num, a:num>

type mul<a:num, a:num>

type div<a:num, a:num>

type mod<a:num, a:num>

type max<a:num, a:num>

type min<a:num, a:num>

type list<a> {
    nil
    cons(a, list<a>)
}

type pair<a, b> {
    pair(a, b)
}

// inline python

fun inline_python<a, args:@[num]>(code:str) : a

// io effect
effect io {
    fun print<a>(a) : unit
}
