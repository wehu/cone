module core.prelude

// builtin functions

fun ____negative<a>(a: a) : a

impl fun ____negative(a: i32) : i32 {
    inline_python<i32>("____result = -a")
}

impl fun ____negative(a: f32) : f32 {
    inline_python<f32>("____result = -a")
}

diff ____negative wrt (a) = ____negative_diff

fun ____negative_diff<a>(a: a, da: a) : a {
    - da
} 

fun ____add<a>(a: a, b:a) : a

impl fun ____add(a : i32, b :i32) : i32 {
    inline_python<i32>("____result = a + b")
}

impl fun ____add(a : f32, b :f32) : f32 {
    inline_python<f32>("____result = a + b")
}

diff ____add wrt (a, b) = ____add_diff

fun ____add_diff<a>(a: a, b:a, do: a) : (a, a) {
    (do, do)
}

fun ____sub<a>(a: a, b:a) : a

impl fun ____sub(a : i32, b :i32) : i32 {
    inline_python<i32>("____result = a - b")
}

impl fun ____sub(a : f32, b :f32) : f32 {
    inline_python<f32>("____result = a - b")
}

diff ____sub wrt (a, b) = ____sub_diff

fun ____sub_diff<a>(a: a, b: a, do: a) : (a, a) {
    (do, - do)
}

fun ____mul<a>(a: a, b:a) : a

impl fun ____mul(a : i32, b :i32) : i32 {
    inline_python<i32>("____result = a * b")
}

impl fun ____mul(a : f32, b :f32) : f32 {
    inline_python<f32>("____result = a * b")
}

diff ____mul wrt (a, b) = ____mul_diff

fun ____mul_diff<a>(a: a, b: a, do: a) : (a, a) {
    (b * do, a * do)
}

fun ____div<a>(a: a, b:a) : a

impl fun ____div(a : i32, b :i32) : i32 {
    inline_python<i32>("____result = a / b")
}

impl fun ____div(a : f32, b :f32) : f32 {
    inline_python<f32>("____result = a / b")
}

diff ____div wrt (a, b) = ____div_diff

fun ____div_diff<a>(a: a, b: a, do: a) : (a, a) {
    (do / b,  - (a * do) / (b * b))
}

fun ____mod<a>(a: a, b:a) : a

impl fun ____mod(a : i32, b :i32) : i32 {
    inline_python<i32>("____result = a % b")
}

impl fun ____mod(a : f32, b :f32) : f32 {
    inline_python<f32>("____result = a % b")
}

fun ____lt<a>(a: a, b:a) : bool

impl fun ____lt(a : i32, b :i32) : bool {
    inline_python<bool>("____result = a < b")
}

impl fun ____lt(a : f32, b :f32) : bool {
    inline_python<bool>("____result = a < b")
}

fun ____gt<a>(a: a, b:a) : bool

impl fun ____gt(a : i32, b :i32) : bool {
    inline_python<bool>("____result = a > b")
}

impl fun ____gt(a : f32, b :f32) : bool {
    inline_python<bool>("____result = a > b")
}

fun ____le<a>(a: a, b:a) : bool 

impl fun ____le(a : i32, b :i32) : bool {
    inline_python<bool>("____result = a <= b")
}

impl fun ____le(a : f32, b :f32) : bool {
    inline_python<bool>("____result = a <= b")
}

fun ____ge<a>(a: a, b:a) : bool

impl fun ____ge(a : i32, b :i32) : bool {
    inline_python<bool>("____result = a >= b")
}

impl fun ____ge(a : f32, b :f32) : bool {
    inline_python<bool>("____result = a >= b")
}

fun ____eq<a>(a: a, b:a) : bool

impl fun ____eq(a : i32, b :i32) : bool {
    inline_python<bool>("____result = a == b")
}

impl fun ____eq(a : f32, b :f32) : bool {
    inline_python<bool>("____result = a == b")
}

fun ____ne<a>(a: a, b:a) : bool

impl fun ____ne(a : i32, b :i32) : bool {
    inline_python<bool>("____result = a != b")
}

impl fun ____ne(a : f32, b :f32) : bool {
    inline_python<bool>("____result = a != b")
}

fun ____not<a>(a: bool) : bool {
    inline_python<bool>("____result = not a")
}

fun ____and<a>(a: bool, b:bool) : bool {
    inline_python<bool>("____result = a and b")
}

fun ____or<a>(a: bool, b:bool) : bool {
    inline_python<bool>("____result = a or b")
}

fun ____assign<a>(a: a, b:a) : unit

fun ____zeros<a>(a: a) : a

// builtin types

type neg<a:num>

type add<a:num, a:num>

type sub<a:num, a:num>

type mul<a:num, a:num>

type div<a:num, a:num>

type mod<a:num, a:num>

type max<a:num, a:num>

type min<a:num, a:num>

type list<a> {
    nil
    cons(a, list<a>)
}

impl fun ____eq<a>(a : list<a>, b : list<a>) : bool {
    inline_python<bool>("____result = a == b")
}

impl fun ____ne<a>(a : list<a>, b : list<a>) : bool {
    inline_python<bool>("____result = a != b")
}

type pair<a, b> {
    pair(a, b)
}

impl fun ____add<a, b>(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
    val (a0, a1) = a
    val (b0, b1) = b
    (a0+b0, a1+b1)
}

impl fun ____sub<a, b>(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
    val (a0, a1) = a
    val (b0, b1) = b
    (a0-b0, a1-b1)
}

impl fun ____mul<a, b>(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
    val (a0, a1) = a
    val (b0, b1) = b
    (a0*b0, a1*b1)
}

impl fun ____eq<a, b>(a : pair<a, b>, b : pair<a, b>) : bool {
    inline_python<bool>("____result = a == b")
}

impl fun ____ne<a, b>(a : pair<a, b>, b : pair<a, b>) : bool {
    inline_python<bool>("____result = a != b")
}

// inline python

fun inline_python<a, args:@[num]>(code:str) : a

// io effect
effect io {
    fun print<a>(a) : unit
}
