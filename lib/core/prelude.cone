module core.prelude

// builtin functions

interface number<a> {
    fun ____negative(a) : a
    fun ____add(a, a) : a
    fun ____sub(a, a) : a
    fun ____mul(a, a) : a
    fun ____div(a, a) : a
    fun ____mod(a, a) : a
}

impl interface number<i32> {
    fun ____negative(a: i32) : i32 {
        inline_python<i32>("____result = -a")
    }
    fun ____add(a : i32, b :i32) : i32 {
        inline_python<i32>("____result = a + b")
    }
    fun ____sub(a : i32, b :i32) : i32 {
        inline_python<i32>("____result = a - b")
    }
    fun ____mul(a : i32, b :i32) : i32 {
        inline_python<i32>("____result = a * b")
    }
    fun ____div(a : i32, b :i32) : i32 {
        inline_python<i32>("____result = a / b")
    }
    fun ____mod(a : i32, b :i32) : i32 {
        inline_python<i32>("____result = a % b")
    }
}

impl interface number<f32> {
    fun ____negative(a: f32) : f32 {
        inline_python<f32>("____result = -a")
    }
    fun ____add(a : f32, b :f32) : f32 {
        inline_python<f32>("____result = a + b")
    }
    fun ____sub(a : f32, b :f32) : f32 {
        inline_python<f32>("____result = a - b")
    }
    fun ____mul(a : f32, b :f32) : f32 {
        inline_python<f32>("____result = a * b")
    }
    fun ____div(a : f32, b :f32) : f32 {
        inline_python<f32>("____result = a / b")
    }
    fun ____mod(a : f32, b :f32) : f32 {
        inline_python<f32>("____result = a % b")
    }
}

diff ____negative wrt (arg0) = ____negative_diff

fun ____negative_diff<a <= number>(a: a, da: a) : a {
    - da
} 

diff ____add wrt (arg0, arg1) = ____add_diff

fun ____add_diff<a <= number>(a: a, b:a, do: a) : (a, a) {
    (do, do)
}

diff ____sub wrt (arg0, arg1) = ____sub_diff

fun ____sub_diff<a <= number>(a: a, b: a, do: a) : (a, a) {
    (do, - do)
}

diff ____mul wrt (arg0, arg1) = ____mul_diff

fun ____mul_diff<a <= number>(a: a, b: a, do: a) : (a, a) {
    (b * do, a * do)
}

diff ____div wrt (arg0, arg1) = ____div_diff

fun ____div_diff<a <= number>(a: a, b: a, do: a) : (a, a) {
    (do / b,  - (a * do) / (b * b))
}

interface order<a> {
    fun ____lt(a, a) : bool
    fun ____gt(a, a) : bool
    fun ____le(a, a) : bool 
    fun ____ge(a, a) : bool
}

impl interface order<i32> {
    fun ____lt(a : i32, b :i32) : bool {
        inline_python<bool>("____result = a < b")
    }
    fun ____gt(a : i32, b :i32) : bool {
        inline_python<bool>("____result = a > b")
    }
    fun ____le(a : i32, b :i32) : bool {
        inline_python<bool>("____result = a <= b")
    }
    fun ____ge(a : i32, b :i32) : bool {
        inline_python<bool>("____result = a >= b")
    }
}

impl interface order<f32> {
    fun ____lt(a : f32, b :f32) : bool {
        inline_python<bool>("____result = a < b")
    }
    fun ____gt(a : f32, b :f32) : bool {
        inline_python<bool>("____result = a > b")
    }
    fun ____le(a : f32, b :f32) : bool {
        inline_python<bool>("____result = a <= b")
    }
    fun ____ge(a : f32, b :f32) : bool {
        inline_python<bool>("____result = a >= b")
    }
}

interface equal<a> {
    fun ____eq(a, a) : bool
    fun ____ne(a, a) : bool
}

impl interface equal<i32> {
    fun ____eq(a : i32, b :i32) : bool {
        inline_python<bool>("____result = a == b")
    }
    fun ____ne(a : i32, b :i32) : bool {
        inline_python<bool>("____result = a != b")
    }
}

impl interface equal<f32> {
    fun ____eq(a : f32, b :f32) : bool {
        inline_python<bool>("____result = a == b")
    }
    fun ____ne(a : f32, b :f32) : bool {
        inline_python<bool>("____result = a != b")
    }
} 

fun ____not<a>(a: bool) : bool {
    inline_python<bool>("____result = not a")
}

fun ____and<a>(a: bool, b:bool) : bool {
    inline_python<bool>("____result = a and b")
}

fun ____or<a>(a: bool, b:bool) : bool {
    inline_python<bool>("____result = a or b")
}

fun ____assign<a>(a: a, b:a) : unit

fun ____zeros<a>(a: a) : a

// builtin types

type neg<a:num>

type add<a:num, a:num>

type sub<a:num, a:num>

type mul<a:num, a:num>

type div<a:num, a:num>

type mod<a:num, a:num>

type max<a:num, a:num>

type min<a:num, a:num>

type cons<a:num, b:[num]>

type nil

type list<a> {
    nil
    cons(a, list<a>)
}

impl interface<a> equal<list<a>> {
    fun ____eq(a : list<a>, b : list<a>) : bool {
        inline_python<bool>("____result = a == b")
    }
    fun ____ne(a : list<a>, b : list<a>) : bool {
        inline_python<bool>("____result = a != b")
    }
}

type pair<a, b> {
    pair(a, b)
}

impl interface<a <= number, b <= number> number<pair<a, b>> {
    fun ____negative(a : pair<a, b>) : pair<a, b> {
        val (a0, a1) = a
        (-a0, -a1)
    }
    fun ____add(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
        val (a0, a1) = a
        val (b0, b1) = b
        (a0+b0, a1+b1)
    }
    fun ____sub(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
        val (a0, a1) = a
        val (b0, b1) = b
        (a0-b0, a1-b1)
    }
    fun ____mul(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
        val (a0, a1) = a
        val (b0, b1) = b
        (a0*b0, a1*b1)
    }
    fun ____div(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
        val (a0, a1) = a
        val (b0, b1) = b
        (a0/b0, a1/b1)
    }
    fun ____mod(a : pair<a, b>, b : pair<a, b>) : pair<a, b> {
        val (a0, a1) = a
        val (b0, b1) = b
        (a0%b0, a1%b1)
    }
}

impl interface<a, b> equal<pair<a, b>> {
    fun ____eq(a : pair<a, b>, b : pair<a, b>) : bool {
        inline_python<bool>("____result = a == b")
    }
    fun ____ne(a : pair<a, b>, b : pair<a, b>) : bool {
        inline_python<bool>("____result = a != b")
    }
}

// inline python

fun inline_python<a, args:[num]>(code:str) : a

// io effect
effect io {
    fun print<a>(a) : unit
}
