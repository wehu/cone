module data/list

type list<a> {
  Nil
  Cons(a, list<a>)
}

fun reverse<a>(l : list<a>) : list<a> {
  var rest = l
  var newl = Nil<a>
  if (rest != Nil<a>) {
    val Cons(e, r) = rest
    rest = r
    newl = Cons(e, newl)
  } else {
	  unit
  }
  newl
}

fun map<a, b>(l : list<a>, f : (a) -> b) : list<b> {
  var rest = l
  var newl = Nil<b>
  if (rest != Nil<a>) {
    val Cons(e, r) = rest
    rest = r
    newl = Cons(f(e), newl)
  } else {
    unit
  }
  reverse(newl)
}