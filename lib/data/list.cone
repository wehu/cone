module data/list

fun reverse<a>(l : list<a>) : list<a> {
  var rest = l
  var newl = Nil<a>
  while (rest != Nil<a>) {
    val (e:r) = rest
    rest = r
    newl = Cons(e, newl)
  }
  newl
}

fun map<a, b>[e](l : list<a>, f : (a) -> e b) : e list<b> {
  if l == Nil<a> {
    Nil<b>
  } else {
    val (e:r) = l
    if r == Nil<a> {
      Cons(f(e), Nil<b>)
    } else {
      Cons(f(e), map(r, f))
    }
  }
}