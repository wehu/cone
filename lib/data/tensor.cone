module data.tensor

import core.math

// tensor types

type tensor<t, shape:@[num]>

impl fun ____add<t, shape:@[num]>(a:tensor<t, shape>, b:tensor<t, shape>) : tensor<t, shape> {
    inline_python<tensor<t, shape>>("____result = a + b")
}

impl fun ____mul<t, shape:@[num]>(a:tensor<t, shape>, b:tensor<t, shape>) : tensor<t, shape> {
    inline_python<tensor<t, shape>>("____result = a * b")
}

fun full<shape: @[num], a>(c : a, s : [i32]) : tensor<a, shape>

diff full wrt (c) = full_diff

fun full_diff<shape: @[num], a>(c: a, s: [i32], c____diff: tensor<a, shape>) : a {
    c
}

fun matmul<n:num, k:num, m:num, a>(lhs : tensor<a, @[n, k]>, rhs : tensor<a, @[k, m]>) : tensor<a, @[n, m]> {
    inline_python<tensor<a, @[n, m]>>("""
from numpy import matmul
____result = matmul(lhs, rhs)
""")  
}

fun convolve_full<n:num, m:num, a>(lhs : tensor<a, @[n]>, rhs : tensor <a, @[m]>) : tensor<a, @[n+m-1]> {
    inline_python<tensor<a, @[n+m-1]>>("""
from numpy import convolve
____result = convolve(lhs, rhs)
""")    
}

fun convolve_same<n:num, m:num, a>(lhs : tensor<a, @[n]>, rhs : tensor <a, @[m]>) : tensor<a, @[max<n,m>]> {
    inline_python<tensor<a, @[max<n,m>]>>("""
from numpy import convolve
____result = convolve(lhs, rhs, mode="same")
""")    
}

fun convolve_valid<n:num, m:num, a>(lhs : tensor<a, @[n]>, rhs : tensor <a, @[m]>) : tensor<a, @[max<n,m> - min<n,m> + 1]> {
    inline_python<tensor<a, @[max<n,m> - min<n,m> + 1]>>("""
from numpy import convolve
____result = convolve(lhs, rhs, mode="valid")
""")  
}

// math related
impl fun sin<shape:@[num]>(a : tensor<f32, shape>) : tensor<f32, shape> {
    inline_python<tensor<f32, shape>>("""
from numpy import sin
____result = sin(a)
""")
}

impl fun cos<shape:@[num]>(a : tensor<f32, shape>) : tensor<f32, shape> {
    inline_python<tensor<f32, shape>>("""
from numpy import cos
____result = cos(a)
""")
}
